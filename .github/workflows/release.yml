name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  build_and_release:
    name: Build and Release
    # 权限设置：允许写入仓库内容和读取 actions
    permissions:
      contents: write
      actions: read
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            name: ccode-linux-x86_64
            platform: linux
          - os: ubuntu-22.04
            target: x86_64-unknown-linux-musl
            name: ccode-linux-x86_64-musl
            platform: linux
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: ccode-windows-x86_64.exe
            platform: windows
          - os: macos-latest
            target: x86_64-apple-darwin
            name: ccode-macos-x86_64
            platform: macos
          - os: macos-latest
            target: aarch64-apple-darwin
            name: ccode-macos-aarch64
            platform: macos
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Install musl tools (Linux)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/ccode ${{ matrix.name }}
          strip ${{ matrix.name }} || true

      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/ccode.exe ${{ matrix.name }}

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ matrix.name }}
          body: |
            ## 🚀 版本更新 ${{ github.ref_name }}
            
            ### 📦 预编译二进制文件
            
            本版本基于 **Ubuntu 22.04 LTS** 环境构建和测试，提供以下平台支持：
            
            - **Linux**: Ubuntu 22.04 LTS (官方支持)
            - **Windows**: Windows 10/11  
            - **macOS**: macOS 11+ (Intel + Apple Silicon)
            
            ### ⚠️ 系统要求
            
            - 官方预编译版本基于 Ubuntu 22.04 LTS 构建
            - 其他 Linux 发行版请从源码编译: `cargo build --release`
            - 最低要求: Rust 1.70+
            
            ### 📋 更新日志
            
            请查看提交历史了解详细变更内容。
            
            ---
            
            **构建环境**: Ubuntu 22.04 LTS | **构建时间**: ${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 构建并上传源代码包
  build_source:
    name: Build Source Package
    # 权限设置：允许写入仓库内容和读取 actions
    permissions:
      contents: write
      actions: read
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5

      - name: Create source archive
        run: |
          git archive --format=tar.gz --prefix=ccode-${{ github.ref_name }}/ HEAD > ccode-${{ github.ref_name }}-source.tar.gz

      - name: Upload Source Archive
        uses: softprops/action-gh-release@v2
        with:
          files: ccode-${{ github.ref_name }}-source.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}